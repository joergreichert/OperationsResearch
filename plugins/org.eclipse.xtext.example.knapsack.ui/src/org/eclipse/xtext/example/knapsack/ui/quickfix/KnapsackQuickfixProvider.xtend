/*
* generated by Xtext
*/
package org.eclipse.xtext.example.knapsack.ui.quickfix

import org.eclipse.xtext.example.knapsack.knapsack.KnapsackProblem
import org.eclipse.xtext.example.knapsack.validation.IssueCodes
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue

import static extension com.google.common.collect.Sets.*
import org.eclipse.emf.ecore.EObject
import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.emf.common.util.URI
import org.eclipse.core.runtime.Path
import org.eclipse.core.internal.resources.Workspace
import org.eclipse.core.resources.IMarker
import org.eclipse.xtext.example.knapsack.ui.internal.KnapsackActivator
import org.eclipse.core.resources.IResource

/**
 * Custom quickfixes.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#quickfixes
 */
class KnapsackQuickfixProvider extends DefaultQuickfixProvider {

	@Fix(IssueCodes::WRONG_ASSEMBLY)
	def optimize(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Pack my bag', 'Calculates the optimal packaging.', null) [ element, context |
			switch (element) {
				KnapsackProblem: {
					val allItems = element.packedItem.toSet.union(element.unpackedItem.toSet).toList
					val newPackedItemNames = issue.data.get(0).split(",")
					val newUnpackedItemNames = issue.data.get(1).split(",")
					val lastDurationMessage = issue.data.get(2)
					val newPackedItems = allItems.filter[newPackedItemNames.contains(name)]
					val newUnpackedItems = allItems.filter[newUnpackedItemNames.contains(name)]
					element.packedItem.clear
					element.packedItem.addAll(newPackedItems.sortBy[name])
					element.unpackedItem.clear
					element.unpackedItem.addAll(newUnpackedItems.sortBy[name])
					element.duration = lastDurationMessage
					removeMarker(element, issue)
				}
			}
		]
	}
	
	def private removeMarker(EObject eObject, Issue issue) {
		val file = ResourcesPlugin.getWorkspace().getRoot().getFile(
			new Path(URI.decode(eObject.eResource.URI.toPlatformString(true)))
		);
		if(file.exists) {
			val markerManager = (ResourcesPlugin.getWorkspace() as Workspace).getMarkerManager();
			val markerList = <IMarker>newArrayList
			markerManager.doFindMarkers(file, markerList, 
				KnapsackActivator.instance.bundle.bundleId + ".knapsack.check.expensive", 
				true, IResource.DEPTH_INFINITE
			)
			val markers = markerList.filter[it.getAttribute(IMarker.CHAR_START) == issue.offset] 
			markers.forEach[delete]
		} else {
			println(file + " does not exist.")
		}
	}	
}
