/*
* generated by Xtext
*/
package org.eclipse.xtext.example.ui.quickfix

import com.google.inject.Inject
import org.eclipse.xtext.example.calculation.KnapsackCalculator
import org.eclipse.xtext.example.knapsack.KnapsackProblem
import org.eclipse.xtext.example.validation.IssueCodes
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue

/**
 * Custom quickfixes.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#quickfixes
 */
class KnapsackQuickfixProvider extends DefaultQuickfixProvider {
	@Inject extension KnapsackCalculator

	@Fix(IssueCodes::WRONG_COMPILATION)
	def optimize(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Pack my bag', 'Calculates the optimal packaging.', null) [
			element, context |
			switch(element) {
				KnapsackProblem: {
		    		val allItems = element.packedItem.union(element.unpackedItem).toList
					val optimumItems = element.calculateOptimum
					val newUnpackedItems = allItems
					newUnpackedItems.removeAll(optimumItems)
					element.packedItem.clear
					element.packedItem.addAll(optimumItems)
					element.unpackedItem.clear
					element.unpackedItem.addAll(newUnpackedItems)
				} 
			}
		]
	}
}
